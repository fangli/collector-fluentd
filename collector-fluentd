#!/usr/bin/env python
# -*- coding:utf-8 -*-

#*********************************************************#
# @@ScriptName: collector-fluentd
# @@Author: Fang.Li<surivlee@gmail.com>
# @@Create Date: 2013-12-05 14:21:57
# @@Modify Date: 2014-03-28 18:53:57
# @@Function:
#*********************************************************#


import os
import sys
import time
import signal
import traceback
import libs.argparse as argparse
from libs.config import readConfig
from libs.common import log
from libs import daemonize
from libs.tcpsocket import TcpSocket
from libs.collectorfluentd import CollectorFluentd


__version__ = "1.5.3"


"""
################################################################################
IMPORTANT NOTICE:                                                              #
Since someone are still using Python2.4 or earlier version, please be note     #
that we should keep project Python2.4/2.6/2.7 compatible!                      #
################################################################################

"""

_IS_SHUTDOWN = False


def sig_handler(signum, frame):
    """Hanlder for break signal"""
    global _IS_SHUTDOWN
    log("Breaking signal received, shutting-down...", 2)
    _IS_SHUTDOWN = True


def signal_initial():
    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGQUIT, sig_handler)
    signal.signal(signal.SIGHUP, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)


def main(conf):
    """Main loop with a socket instance"""
    try:
        log("Initializing socket and collecting instance...")
        sock = TcpSocket(
            host=conf.fluentd_host,
            port=conf.fluentd_port,
            timeout=conf.connection_timeout, )
        cf = CollectorFluentd(conf)
        log("Initialization done.")
    except:
        log("Fatal Error detected, unable to initial socket and collecting instance", 2)
        log(str(traceback.format_exc()), 2)
        sys.exit(1)


    log("Starting data collecting loop...")

    while not _IS_SHUTDOWN:
        try:
            outputs = cf.getPluginsOutput()
            cf.write2Cache(outputs)
            cf.sendAllCache(sock)
        except:
            log(str(traceback.format_exc()), 2)
            cf.logError("collector.error.uncaught")

        if not _IS_SHUTDOWN:
            time.sleep(conf.reporting_interval)

    log("Collector-fluentd daemon exit.", 2)
    sys.exit(0)


def config_parse():
    """Read command line arguments, and get config from configfile

    If config file not exist or config can not be parsed, an exception will be
    thrown out with a fatal error.

    Returns:
        An configuration object.
    """
    p = argparse.ArgumentParser(
        usage='collector-fluentd -f [Configuration File Path]')

    p.add_argument(
        '-f',
        '--config',
        default="/etc/collector-fluentd.conf",
        help="Path to configuration file, default to /etc/collector-fluentd.conf")

    p.add_argument(
        '-d',
        '--daemonize',
        default=False,
        action="store_true",
        help="Run as a background daemon.")

    p.add_argument(
        '-v',
        '--version',
        default=False,
        action="store_true",
        help="Show version information of collector-fluentd.")

    args = p.parse_args()

    if args.version:
        print "Collector-fluentd"
        print "A large-scale system metrics collecting daemon tool for fluentd"
        print "Version", __version__
        print ""
        sys.exit(0)

    if not os.path.isfile(args.config):
        print >> sys.stderr, "[ERR] Config file not exist:", args.config
        sys.exit(1)

    try:
        conf = readConfig(args.config)
    except Exception, ex:
        print >> sys.stderr, "[ERR] Config could not be parsed:", str(ex)
        sys.exit(1)

    conf.daemonize = args.daemonize

    return conf


if __name__ == "__main__":

    conf = config_parse()

    # We should push prog to background in daemon mode
    if conf.daemonize:
        daemonize.daemonize()
    daemonize.writePid(conf.pid_file)

    signal_initial()

    main(conf)

